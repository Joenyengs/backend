# Generated by Django 5.2 on 2025-06-05 15:58

import datetime
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import users.models
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='SessionYear',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('debut', models.DateField()),
                ('fin', models.DateField()),
                ('promotion', models.IntegerField()),
                ('denomination', models.CharField(blank=True, max_length=30, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('alumni', 'Ancien élève'), ('formateur', 'Formateur'), ('eleve', 'Elève'), ('candidat', 'Futur élève'), ('evaluateur', 'Evaluateur')], default='candidat', max_length=25)),
                ('otp', models.CharField(blank=True, max_length=6, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(default='Notification', max_length=30)),
                ('message', models.CharField(max_length=512)),
                ('type', models.CharField(choices=[('info', 'Communiqué'), ('success', 'Avis au public'), ('error', 'Décision'), ('warning', 'Alerte')], default='info', max_length=10)),
                ('is_read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('link', models.CharField(blank=True, max_length=255)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ProfilAlumni',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('annee_de_graduation', models.IntegerField(validators=[django.core.validators.MinValueValidator(2013, "L'année de graduation ne peut être inférieur à celle du début de l'ENA-RDC"), django.core.validators.MaxValueValidator(9999, "L'année ne peut dépasser 4 digits")])),
                ('emploi_actuel', models.CharField(blank=True, max_length=100, null=True)),
                ('dispo_mentorat', models.BooleanField(default=False)),
                ('realisations', models.CharField(max_length=250)),
                ('user', models.OneToOneField(default=users.models.ProfilAlumni.get_first_user_id, on_delete=django.db.models.deletion.CASCADE, related_name='profil_alumni', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ProfilFormateur',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('expertise', models.CharField(blank=True, max_length=100, null=True)),
                ('duree_experience', models.IntegerField()),
                ('user', models.OneToOneField(default=users.models.ProfilFormateur.get_first_user_id, on_delete=django.db.models.deletion.CASCADE, related_name='profil_formateur', to=settings.AUTH_USER_MODEL)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='formateurs', to='users.sessionyear')),
            ],
        ),
        migrations.CreateModel(
            name='ProfilEvaluateur',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('expertise', models.CharField(blank=True, max_length=100, null=True)),
                ('duree_experience', models.IntegerField()),
                ('user', models.OneToOneField(default=users.models.ProfilEvaluateur.get_first_user_id, on_delete=django.db.models.deletion.CASCADE, related_name='profil_evaluateur', to=settings.AUTH_USER_MODEL)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='evaluateurs', to='users.sessionyear')),
            ],
        ),
        migrations.CreateModel(
            name='ProfilEleve',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('user', models.OneToOneField(default=users.models.ProfilEleve.get_first_user_id, on_delete=django.db.models.deletion.CASCADE, related_name='profil_eleve', to=settings.AUTH_USER_MODEL)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='eleves', to='users.sessionyear')),
            ],
        ),
        migrations.CreateModel(
            name='ProfilCandidat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('numero_piece_identite', models.CharField(blank=True, max_length=50, null=True)),
                ('nom', models.CharField(blank=True, max_length=50, null=True)),
                ('postnom', models.CharField(blank=True, max_length=50, null=True)),
                ('prenom', models.CharField(blank=True, max_length=50, null=True)),
                ('genre', models.CharField(blank=True, choices=[('M', 'Masculin'), ('F', 'Féminin')], max_length=1, null=True)),
                ('etat_civil', models.CharField(blank=True, choices=[('C', 'Célibataire'), ('M', 'Marié(e)'), ('V', 'Veuf(ve)'), ('D', 'Divorcé(e)')], max_length=1, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('lieu_de_naissance', models.CharField(blank=True, max_length=50, null=True)),
                ('date_de_naissance', models.DateField(blank=True, default=datetime.datetime(2025, 6, 5, 15, 58, 49, 777979, tzinfo=datetime.timezone.utc), null=True)),
                ('photo', models.FileField(blank=True, default='<function ProfilCandidat.user_photo_path at 0x0000017D549C8860>/default.jpg', null=True, upload_to=users.models.ProfilCandidat.user_photo_path)),
                ('adresse_physique', models.TextField(blank=True, null=True)),
                ('province_de_residence', models.CharField(blank=True, max_length=50, null=True)),
                ('ville_de_residence', models.CharField(blank=True, max_length=50, null=True)),
                ('province_d_origine', models.CharField(blank=True, max_length=50, null=True)),
                ('nationalite', models.CharField(blank=True, choices=[('RDC', 'République Démocratique du Congo'), ('AUTRE', 'Autre')], max_length=50, null=True)),
                ('niveau_etude', models.CharField(choices=[('doctorat', 'Doctorat'), ('maitrise', 'Maitrise'), ('licence_bac+5', 'Licence Bac+5'), ('licence_bac+3', 'Licence Bac+3'), ('graduat', 'Graduat'), ('diplome_etat', "Diplome d'état")], max_length=50)),
                ('domaine_etude', models.CharField(choices=[('Administration', 'Administration'), ('Agronomie', 'Agronomie'), ('Agronomie générale', 'Agronomie générale'), ('Aménagement et gestion des ressources naturelles / Environnement', 'Aménagement et gestion des ressources naturelles / Environnement'), ('Anthropologie', 'Anthropologie'), ('Architecture', 'Architecture'), ('Arts dramatiques et cinématographie', 'Arts dramatiques et cinématographie'), ('Arts plastiques', 'Arts plastiques'), ('Aviation civile', 'Aviation civile'), ('Bâtiments et travaux publics', 'Bâtiments et travaux publics'), ('Biologie médicale', 'Biologie médicale'), ('Chimie', 'Chimie'), ('Cinéma', 'Cinéma'), ('Communication', 'Communication'), ('Comptabilité', 'Comptabilité'), ('Criminologie', 'Criminologie'), ('Design textile, stylisme et création de mode', 'Design textile, stylisme et création de mode'), ('Développement', 'Développement'), ('Diplôme MITEL', 'Diplôme MITEL'), ('Droit', 'Droit'), ('Écologie', 'Écologie'), ('Économie', 'Économie'), ('Électronique', 'Électronique'), ('Environnement et développement durable', 'Environnement et développement durable'), ('Exploitation Aéronautique', 'Exploitation Aéronautique'), ('Exploitation et production pétrolière', 'Exploitation et production pétrolière'), ('Finance, Banques et Assurances', 'Finance, Banques et Assurances'), ('Fiscalité', 'Fiscalité'), ('Foresterie', 'Foresterie'), ('Génie civil', 'Génie civil'), ('Génie des mines', 'Génie des mines'), ('Génie électrique', 'Génie électrique'), ('Génie informatique', 'Génie informatique'), ('Génie logiciel', 'Génie logiciel'), ('Génie mécanique', 'Génie mécanique'), ('Génie textile', 'Génie textile'), ('Géographie', 'Géographie'), ('Géologie', 'Géologie'), ('Géotechnique et Hydrogéologie', 'Géotechnique et Hydrogéologie'), ("Gestion de l'Environnement", "Gestion de l'Environnement"), ('Gestion financière', 'Gestion financière'), ('Gestion des entreprises et organisation du travail / GRH', 'Gestion des entreprises et organisation du travail / GRH'), ('Histoire et archivistique', 'Histoire et archivistique'), ('Hôtellerie et tourisme', 'Hôtellerie et tourisme'), ('Informatique', 'Informatique'), ('Kinésithérapie', 'Kinésithérapie'), ('Langues et littératures africaines', 'Langues et littératures africaines'), ('Langues étrangères (français, anglais, espagnol, chinois, allemand, etc.)', 'Langues étrangères (français, anglais, espagnol, chinois, allemand, etc.)'), ('Lettres et Sciences humaines', 'Lettres et Sciences humaines'), ('Management des organisations', 'Management des organisations'), ('Marketing', 'Marketing'), ('Mathématique', 'Mathématique'), ('Mathématique-Informatique', 'Mathématique-Informatique'), ('Médicine', 'Médicine'), ('Médecine générale', 'Médecine générale'), ('Médecine vétérinaire', 'Médecine vétérinaire'), ('Métallurgie', 'Métallurgie'), ('Musique', 'Musique'), ('Nutrition et technologie alimentaire', 'Nutrition et technologie alimentaire'), ('Odontologie (chirurgie dentaire)', 'Odontologie (chirurgie dentaire)'), ('Pêche et Aquaculture', 'Pêche et Aquaculture'), ('Philosophie', 'Philosophie'), ('Pharmacie', 'Pharmacie'), ('Photographie', 'Photographie'), ('Pédagogie', 'Pédagogie'), ('Physique', 'Physique'), ('Pétrole et gaz', 'Pétrole et gaz'), ('Psychologie', 'Psychologie'), ('Relations Internationales', 'Relations Internationales'), ('Réseau et Télécommunications', 'Réseau et Télécommunications'), ('Santé publique', 'Santé publique'), ('Sciences de la communication et journalisme', 'Sciences de la communication et journalisme'), ("Sciences de l'Éducation", "Sciences de l'Éducation"), ('Sciences infirmières', 'Sciences infirmières'), ('Sciences politiques et administratives', 'Sciences politiques et administratives'), ("Sciences et technologies de l'information", "Sciences et technologies de l'information"), ('Sociologie', 'Sociologie'), ('Statistique', 'Statistique'), ('Télécommunications', 'Télécommunications'), ('Théâtre', 'Théâtre'), ('Transport et logistique', 'Transport et logistique'), ('Urbanisme', 'Urbanisme'), ('Urbanisme et aménagement du territoire', 'Urbanisme et aménagement du territoire'), ('Zootechnie', 'Zootechnie')], max_length=100)),
                ('universite_frequentee', models.CharField(blank=True, max_length=50, null=True)),
                ('score_obtenu', models.FloatField(blank=True, choices=[(60.0, '60.0'), (60.1, '60.1'), (60.2, '60.2'), (60.3, '60.3'), (60.4, '60.4'), (60.5, '60.5'), (60.6, '60.6'), (60.7, '60.7'), (60.8, '60.8'), (60.9, '60.9'), (61.0, '61.0'), (61.1, '61.1'), (61.2, '61.2'), (61.3, '61.3'), (61.4, '61.4'), (61.5, '61.5'), (61.6, '61.6'), (61.7, '61.7'), (61.8, '61.8'), (61.9, '61.9'), (62.0, '62.0'), (62.1, '62.1'), (62.2, '62.2'), (62.3, '62.3'), (62.4, '62.4'), (62.5, '62.5'), (62.6, '62.6'), (62.7, '62.7'), (62.8, '62.8'), (62.9, '62.9'), (63.0, '63.0'), (63.1, '63.1'), (63.2, '63.2'), (63.3, '63.3'), (63.4, '63.4'), (63.5, '63.5'), (63.6, '63.6'), (63.7, '63.7'), (63.8, '63.8'), (63.9, '63.9'), (64.0, '64.0'), (64.1, '64.1'), (64.2, '64.2'), (64.3, '64.3'), (64.4, '64.4'), (64.5, '64.5'), (64.6, '64.6'), (64.7, '64.7'), (64.8, '64.8'), (64.9, '64.9'), (65.0, '65.0'), (65.1, '65.1'), (65.2, '65.2'), (65.3, '65.3'), (65.4, '65.4'), (65.5, '65.5'), (65.6, '65.6'), (65.7, '65.7'), (65.8, '65.8'), (65.9, '65.9'), (66.0, '66.0'), (66.1, '66.1'), (66.2, '66.2'), (66.3, '66.3'), (66.4, '66.4'), (66.5, '66.5'), (66.6, '66.6'), (66.7, '66.7'), (66.8, '66.8'), (66.9, '66.9'), (67.0, '67.0'), (67.1, '67.1'), (67.2, '67.2'), (67.3, '67.3'), (67.4, '67.4'), (67.5, '67.5'), (67.6, '67.6'), (67.7, '67.7'), (67.8, '67.8'), (67.9, '67.9'), (68.0, '68.0'), (68.1, '68.1'), (68.2, '68.2'), (68.3, '68.3'), (68.4, '68.4'), (68.5, '68.5'), (68.6, '68.6'), (68.7, '68.7'), (68.8, '68.8'), (68.9, '68.9'), (69.0, '69.0'), (69.1, '69.1'), (69.2, '69.2'), (69.3, '69.3'), (69.4, '69.4'), (69.5, '69.5'), (69.6, '69.6'), (69.7, '69.7'), (69.8, '69.8'), (69.9, '69.9'), (70.0, '70.0'), (70.1, '70.1'), (70.2, '70.2'), (70.3, '70.3'), (70.4, '70.4'), (70.5, '70.5'), (70.6, '70.6'), (70.7, '70.7'), (70.8, '70.8'), (70.9, '70.9'), (71.0, '71.0'), (71.1, '71.1'), (71.2, '71.2'), (71.3, '71.3'), (71.4, '71.4'), (71.5, '71.5'), (71.6, '71.6'), (71.7, '71.7'), (71.8, '71.8'), (71.9, '71.9'), (72.0, '72.0'), (72.1, '72.1'), (72.2, '72.2'), (72.3, '72.3'), (72.4, '72.4'), (72.5, '72.5'), (72.6, '72.6'), (72.7, '72.7'), (72.8, '72.8'), (72.9, '72.9'), (73.0, '73.0'), (73.1, '73.1'), (73.2, '73.2'), (73.3, '73.3'), (73.4, '73.4'), (73.5, '73.5'), (73.6, '73.6'), (73.7, '73.7'), (73.8, '73.8'), (73.9, '73.9'), (74.0, '74.0'), (74.1, '74.1'), (74.2, '74.2'), (74.3, '74.3'), (74.4, '74.4'), (74.5, '74.5'), (74.6, '74.6'), (74.7, '74.7'), (74.8, '74.8'), (74.9, '74.9'), (75.0, '75.0'), (75.1, '75.1'), (75.2, '75.2'), (75.3, '75.3'), (75.4, '75.4'), (75.5, '75.5'), (75.6, '75.6'), (75.7, '75.7'), (75.8, '75.8'), (75.9, '75.9'), (76.0, '76.0'), (76.1, '76.1'), (76.2, '76.2'), (76.3, '76.3'), (76.4, '76.4'), (76.5, '76.5'), (76.6, '76.6'), (76.7, '76.7'), (76.8, '76.8'), (76.9, '76.9'), (77.0, '77.0'), (77.1, '77.1'), (77.2, '77.2'), (77.3, '77.3'), (77.4, '77.4'), (77.5, '77.5'), (77.6, '77.6'), (77.7, '77.7'), (77.8, '77.8'), (77.9, '77.9'), (78.0, '78.0'), (78.1, '78.1'), (78.2, '78.2'), (78.3, '78.3'), (78.4, '78.4'), (78.5, '78.5'), (78.6, '78.6'), (78.7, '78.7'), (78.8, '78.8'), (78.9, '78.9'), (79.0, '79.0'), (79.1, '79.1'), (79.2, '79.2'), (79.3, '79.3'), (79.4, '79.4'), (79.5, '79.5'), (79.6, '79.6'), (79.7, '79.7'), (79.8, '79.8'), (79.9, '79.9'), (80.0, '80.0'), (80.1, '80.1'), (80.2, '80.2'), (80.3, '80.3'), (80.4, '80.4'), (80.5, '80.5'), (80.6, '80.6'), (80.7, '80.7'), (80.8, '80.8'), (80.9, '80.9'), (81.0, '81.0'), (81.1, '81.1'), (81.2, '81.2'), (81.3, '81.3'), (81.4, '81.4'), (81.5, '81.5'), (81.6, '81.6'), (81.7, '81.7'), (81.8, '81.8'), (81.9, '81.9'), (82.0, '82.0'), (82.1, '82.1'), (82.2, '82.2'), (82.3, '82.3'), (82.4, '82.4'), (82.5, '82.5'), (82.6, '82.6'), (82.7, '82.7'), (82.8, '82.8'), (82.9, '82.9'), (83.0, '83.0'), (83.1, '83.1'), (83.2, '83.2'), (83.3, '83.3'), (83.4, '83.4'), (83.5, '83.5'), (83.6, '83.6'), (83.7, '83.7'), (83.8, '83.8'), (83.9, '83.9'), (84.0, '84.0'), (84.1, '84.1'), (84.2, '84.2'), (84.3, '84.3'), (84.4, '84.4'), (84.5, '84.5'), (84.6, '84.6'), (84.7, '84.7'), (84.8, '84.8'), (84.9, '84.9'), (85.0, '85.0'), (85.1, '85.1'), (85.2, '85.2'), (85.3, '85.3'), (85.4, '85.4'), (85.5, '85.5'), (85.6, '85.6'), (85.7, '85.7'), (85.8, '85.8'), (85.9, '85.9'), (86.0, '86.0'), (86.1, '86.1'), (86.2, '86.2'), (86.3, '86.3'), (86.4, '86.4'), (86.5, '86.5'), (86.6, '86.6'), (86.7, '86.7'), (86.8, '86.8'), (86.9, '86.9'), (87.0, '87.0'), (87.1, '87.1'), (87.2, '87.2'), (87.3, '87.3'), (87.4, '87.4'), (87.5, '87.5'), (87.6, '87.6'), (87.7, '87.7'), (87.8, '87.8'), (87.9, '87.9'), (88.0, '88.0'), (88.1, '88.1'), (88.2, '88.2'), (88.3, '88.3'), (88.4, '88.4'), (88.5, '88.5'), (88.6, '88.6'), (88.7, '88.7'), (88.8, '88.8'), (88.9, '88.9'), (89.0, '89.0'), (89.1, '89.1'), (89.2, '89.2'), (89.3, '89.3'), (89.4, '89.4'), (89.5, '89.5'), (89.6, '89.6'), (89.7, '89.7'), (89.8, '89.8'), (89.9, '89.9'), (90.0, '90.0'), (90.1, '90.1'), (90.2, '90.2'), (90.3, '90.3'), (90.4, '90.4'), (90.5, '90.5'), (90.6, '90.6'), (90.7, '90.7'), (90.8, '90.8'), (90.9, '90.9'), (91.0, '91.0'), (91.1, '91.1'), (91.2, '91.2'), (91.3, '91.3'), (91.4, '91.4'), (91.5, '91.5'), (91.6, '91.6'), (91.7, '91.7'), (91.8, '91.8'), (91.9, '91.9'), (92.0, '92.0'), (92.1, '92.1'), (92.2, '92.2'), (92.3, '92.3'), (92.4, '92.4'), (92.5, '92.5'), (92.6, '92.6'), (92.7, '92.7'), (92.8, '92.8'), (92.9, '92.9'), (93.0, '93.0'), (93.1, '93.1'), (93.2, '93.2'), (93.3, '93.3'), (93.4, '93.4'), (93.5, '93.5'), (93.6, '93.6'), (93.7, '93.7'), (93.8, '93.8'), (93.9, '93.9'), (94.0, '94.0'), (94.1, '94.1'), (94.2, '94.2'), (94.3, '94.3'), (94.4, '94.4'), (94.5, '94.5'), (94.6, '94.6'), (94.7, '94.7'), (94.8, '94.8'), (94.9, '94.9'), (95.0, '95.0'), (95.1, '95.1'), (95.2, '95.2'), (95.3, '95.3'), (95.4, '95.4'), (95.5, '95.5'), (95.6, '95.6'), (95.7, '95.7'), (95.8, '95.8'), (95.9, '95.9'), (96.0, '96.0'), (96.1, '96.1'), (96.2, '96.2'), (96.3, '96.3'), (96.4, '96.4'), (96.5, '96.5'), (96.6, '96.6'), (96.7, '96.7'), (96.8, '96.8'), (96.9, '96.9'), (97.0, '97.0'), (97.1, '97.1'), (97.2, '97.2'), (97.3, '97.3'), (97.4, '97.4'), (97.5, '97.5'), (97.6, '97.6'), (97.7, '97.7'), (97.8, '97.8'), (97.9, '97.9'), (98.0, '98.0'), (98.1, '98.1'), (98.2, '98.2'), (98.3, '98.3'), (98.4, '98.4'), (98.5, '98.5'), (98.6, '98.6'), (98.7, '98.7'), (98.8, '98.8'), (98.9, '98.9'), (99.0, '99.0'), (99.1, '99.1'), (99.2, '99.2'), (99.3, '99.3'), (99.4, '99.4'), (99.5, '99.5'), (99.6, '99.6'), (99.7, '99.7'), (99.8, '99.8'), (99.9, '99.9')], null=True, validators=[django.core.validators.MinValueValidator(60.0), django.core.validators.MaxValueValidator(99.9)])),
                ('annee_de_graduation', models.IntegerField(default=users.models.ProfilCandidat.default_annee_de_graduation, validators=[django.core.validators.MinValueValidator(2013, "L'année de graduation ne peut être inférieur à celle du début de l'ENA-RDC"), django.core.validators.MaxValueValidator(9999, "L'année ne peut dépasser 4 digits")])),
                ('statut_professionnel', models.CharField(blank=True, choices=[('fonctionnaire', 'Fonctionnaire'), ('sans_emploi', 'Sans emploi'), ('employe_prive', 'Employé privé')], max_length=50, null=True)),
                ('matricule', models.CharField(blank=True, max_length=50, null=True)),
                ('grade', models.CharField(blank=True, max_length=50, null=True)),
                ('fonction', models.CharField(blank=True, max_length=50, null=True)),
                ('administration_d_attache', models.CharField(blank=True, max_length=50, null=True)),
                ('ministere', models.CharField(blank=True, max_length=50, null=True)),
                ('entreprise', models.CharField(blank=True, max_length=50, null=True)),
                ('user', models.OneToOneField(default=users.models.ProfilCandidat.get_first_user_id, on_delete=django.db.models.deletion.CASCADE, related_name='profil_candidat', to=settings.AUTH_USER_MODEL)),
                ('session', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='candidats', to='users.sessionyear')),
            ],
            options={
                'verbose_name': 'Profil Candidat',
                'verbose_name_plural': 'Profils Candidats',
            },
        ),
    ]
